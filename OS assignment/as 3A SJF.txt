#include<stdio.h>

int main() {
    int at[10], bt[10], temp[10];
    int wt[10], tt[10];  // Arrays for waiting time and turnaround time
    int i, sml, cnt = 0, t = 0, p;
    double total_wt = 0, total_tt = 0;
    float avg_wt, avg_tt;
    
    printf("Enter the total number of processes: ");
    scanf("%d", &p);

    // Input Arrival Time and Burst Time
    for(i = 0; i < p; i++) {
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &at[i]);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &bt[i]);
        temp[i] = bt[i];  // Copy burst time to temp array
    }

    bt[9] = 9999;  // Set a high burst time for comparison

    for(t = 0; cnt != p; t++) {
        sml = 9;  // Initialize to the process with the largest burst time
        
        for(i = 0; i < p; i++) {
            if(at[i] <= t && bt[i] < bt[sml] && bt[i] > 0) {
                sml = i;  // Find the process with the smallest burst time
            }
        }

        bt[sml]--;  // Decrease burst time

        // Process completes execution
        if(bt[sml] == 0) {
            cnt++;  // Increment the completed process count
            int end = t + 1;
            wt[sml] = end - at[sml] - temp[sml];  // Calculate waiting time
            tt[sml] = end - at[sml];  // Calculate turnaround time
            total_wt += wt[sml];
            total_tt += tt[sml];
        }
    }

    // Print the table with process information
    printf("\nProcess\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < p; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, temp[i], at[i], wt[i], tt[i]);
    }

    avg_wt = total_wt / p;  // Calculate average waiting time
    avg_tt = total_tt / p;  // Calculate average turnaround time

    printf("\nAverage Waiting Time: %.2f", avg_wt);
    printf("\nAverage Turnaround Time: %.2f\n", avg_tt);

    return 0;
}
