#include<stdio.h>
#include<stdlib.h>

int RQ[100], n, initial;

void getData()
{
    printf("Enter the number of Requests\n");
    scanf("%d", &n);
    printf("Enter the Requests sequence\n");
    for(int i = 0; i < n; i++)
        scanf("%d", &RQ[i]);
    printf("Enter initial head position\n");
    scanf("%d", &initial);
}

void sstf()
{
    int localRQ[100], localInitial = initial, localCount = 0, localTotalHeadMovement = 0;

    // Copy RQ[] to localRQ[]
    for(int i = 0; i < n; i++)
        localRQ[i] = RQ[i];

    while(localCount != n)
    {
        int min = 1000, d, index = -1;
        for(int i = 0; i < n; i++)
        {
            d = abs(localRQ[i] - localInitial);
            if(min > d)
            {
                min = d;
                index = i;
            }
        }
        if(index == -1)
            break;
        localTotalHeadMovement += min;
        localInitial = localRQ[index];
        localRQ[index] = 1000;
        localCount++;
    }
    printf("Total head movement is %d", localTotalHeadMovement);
}

void scan()
{
    int size, move, i, j, k;
    int TotalHeadMoment = 0;
    int localRQ[100], localInitial = initial;

    printf("Enter total disk size\n");
    scanf("%d", &size);
    printf("Enter the head movement direction for high 1 and for low 0\n");
    scanf("%d", &move);

    // Copy RQ[] to localRQ[]
    for(i = 0; i < n; i++)
        localRQ[i] = RQ[i];

    // Sort localRQ[]
    for(i = 0; i < n; i++)
    {
        for(j = 0; j < n - i - 1; j++)
        {
            if(localRQ[j] > localRQ[j + 1])
            {
                int temp = localRQ[j];
                localRQ[j] = localRQ[j + 1];
                localRQ[j + 1] = temp;
            }
        }
    }

    int index = -1;
    for(i = 0; i < n; i++)
    {
        if(localInitial < localRQ[i])
        {
            index = i;
            break;
        }
    }

    if(index == -1)
        index = n;

    if(move == 1)
    {
        for(i = index; i < n; i++)
        {
            TotalHeadMoment += abs(localRQ[i] - localInitial);
            localInitial = localRQ[i];
        }
        TotalHeadMoment += abs(size - localInitial - 1);
        localInitial = size - 1;
        for(i = index - 1; i >= 0; i--)
        {
            TotalHeadMoment += abs(localRQ[i] - localInitial);
            localInitial = localRQ[i];
        }
    }
    else
    {
        for(i = index - 1; i >= 0; i--)
        {
            TotalHeadMoment += abs(localRQ[i] - localInitial);
            localInitial = localRQ[i];
        }
        TotalHeadMoment += abs(localInitial - 0);
        localInitial = 0;
        for(i = index; i < n; i++)
        {
            TotalHeadMoment += abs(localRQ[i] - localInitial);
            localInitial = localRQ[i];
        }
    }
    printf("Total head movement is %d", TotalHeadMoment);
}

void clook()
{
    int size, move, i, j, k;
    int TotalHeadMoment = 0;
    int localRQ[100], localInitial = initial;

    printf("Enter total disk size\n");
    scanf("%d", &size);
    printf("Enter the head movement direction for high 1 and for low 0\n");
    scanf("%d", &move);

    // Copy RQ[] to localRQ[]
    for(i = 0; i < n; i++)
        localRQ[i] = RQ[i];

    // Sort localRQ[]
    for(i = 0; i < n; i++)
    {
        for(j = 0; j < n - i - 1; j++)
        {
            if(localRQ[j] > localRQ[j + 1])
            {
                int temp = localRQ[j];
                localRQ[j] = localRQ[j + 1];
                localRQ[j + 1] = temp;
            }
        }
    }

    int index = -1;
    for(i = 0; i < n; i++)
    {
        if(localInitial < localRQ[i])
        {
            index = i;
            break;
        }
    }

    if(index == -1)
        index = 0;

    if(move == 1)
    {
        for(i = index; i < n; i++)
        {
            TotalHeadMoment += abs(localRQ[i] - localInitial);
            localInitial = localRQ[i];
        }
        for(i = 0; i < index; i++)
        {
            TotalHeadMoment += abs(localRQ[i] - localInitial);
            localInitial = localRQ[i];
        }
    }
    else
    {
        for(i = index - 1; i >= 0; i--)
        {
            TotalHeadMoment += abs(localRQ[i] - localInitial);
            localInitial = localRQ[i];
        }
        for(i = n - 1; i >= index; i--)
        {
            TotalHeadMoment += abs(localRQ[i] - localInitial);
            localInitial = localRQ[i];
        }
    }
    printf("Total head movement is %d", TotalHeadMoment);
}

int main()
{
    int choice;
    while(1)
    {
        printf("\nDisk Scheduling Algorithms\n1.Enter data\n2.SSTF\n3.SCAN\n4.C-LOOK\n\n5.Exit\nEnter your choice:");
        scanf("%d", &choice);
        switch(choice)
        {
            case 1:
                getData();
                break;
            case 2:
                sstf();
                break;
            case 3:
                scan();
                break;
            case 4:
                clook();
                break;
            case 5:
                return 0;
            default:
                printf("Invalid choice!\n");
                break;
        }
    }
}